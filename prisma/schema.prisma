// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Enums (check constraints approach)
enum Condition {
  nuovo
  come_nuovo
  ottimo
  buono
  accettabile
}

enum OrderStatus {
  ricevuto
  spedito
  consegnato
  annullato
}

enum Sector {
  ITC
  ITIS
  IPSS
}

enum UserRole {
  Admin
  User
}

// Models
model Book {
  id          String       @id @default(cuid())
  title       String
  isbn        String?
  price       Float
  condition   Condition
  subject     String
  course      String
  sector      Sector
  image       String?
  available   Boolean      @default(true)
  ownerId     String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderId     String?      @unique
  orderStatus OrderStatus?

  user       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  order      Order?      @relation(fields: [orderId], references: [id])
  BookInCart BookInCart?
}

model BookInCart {
  id     String @id @default(cuid())
  bookId String @unique
  cartId String @unique

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [cartId], references: [id])
}

model Cart {
  id          String       @id @default(cuid())
  userId      String       @unique
  bookInCarts BookInCart[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id     String   @id @default(cuid())
  userId String
  books  Book[]
  date   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role          UserRole        @default(User)
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book?
  Cart      Cart?
  Order     Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
